csvcmp --only-in a.csv b.csv (--match-rows)
csvcmp --intersection a.csv b.csv (--match-rows)
csvcmp --in-any-of a.csv b.csv c.csv d.csv ... (checks if rows of a are in any of the ones after)


global options:
    --align-columns (t/f if column names are not aligned in csv, but both have same column names, realigns the column names to match)
        the aligned columns will be put on the left first, 
        sorted alphabetically from left to right and the remaining
        columns that are not common between the 2 csv's will be put on the 
        right side keeping their original relative positions
    --columns-to-use (only use these columns for comparison)
    --columns-to-ignore (do not use these columns for comparison)
    --fill-null (fills null with 'NULL' so that they can be compared)
    --drop-null (drops rows with nulls)
    --input-dir (use this dir as the base for the path to the files)
    --output-dir (use this dir as the base for the outputs of the script)
    --keep-columns (the columns to keep in the final dfs at the very end, they are kept in the position given)
    --use-common-columns (uses the largest set of common columns for comparison)

    possible but not sure if worth it:
        --use-index (accounts for row position for comparison as well)
    

notes:
    need to install the command line script as an entry point 
    
    # setup.py
    from setuptools import setup, find_packages

    setup(
        name='csv_compare_lib',
        version='1.0',
        packages=find_packages(),
        entry_points={
            'console_scripts': [
                'csvcompare=csv_compare_lib.script:main',  # Adjust this to your script's entry point
            ],
        },
    )

    csvcompare arg1 arg2